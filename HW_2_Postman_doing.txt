HW_2 Postman





   TASK 1
http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
3. Проверить, что в body приходит правильный string.

   ВЫПОЛНЕНИЕ TASK 1:
Имя файла в постман: TASK_1_Request_/first

1) По методу GET получаем ответ:
This is the first responce from server!

2) Ставим сниппет: Status code: Code is 200
и получаем код, который не нужно видоизменять:
============================================
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
============================================

3) Ставим сниппет: Response body: Contains string
получаем код, который нужно изменить:
============================================
pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("string_you_want_to_search");
});
============================================
где текст в кавычках string_you_want_to_search нужно поменять на тот, который мы ожидаем с response:
This is the first responce from server!

Итоговый код, который проверяет, что в body приходит правильный string:
============================================
pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});
============================================





   TASK 2
http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.

   ВЫПОЛНЕНИЕ TASK 2:
Имя файла в постман: TASK_2_Parse_response_body_in_json

Рабочий код парсинга response body в json:
============================================
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

let jsonData = pm.response.json();
let money = jsonData.salary;
pm.environment.set("salary_variable", money);

console.log('variable "jsonData":', jsonData);
console.log('variable "money":', money);
============================================

// Описание логики кода:
// 1) Создается переменная salary_variable в окружении.
// 2) Выбираем сниппет: Set an environment variable
// 3) Получаем код: pm.environment.set("variable_key", "variable_value");
// 4) Вместо "variable_key" ставим переменную с окружения "salary_variable"
// получаем строку кода: pm.environment.set("salary_variable", "variable_value");
// 5) Выбираем сниппет: Response body: JSON value check
// 6) Получаем код:
// pm.test("Your test name", function () {
//     var jsonData = pm.response.json();
//     pm.expect(jsonData.value).to.eql(100);
// });
// 7) Из этого кода забираем только строку
// var jsonData = pm.response.json();
// и var меняем на let.
// 8) Объявляем переменную money в коде:
// let money = jsonData.salary;
// где salary это переменная с ответа сервера.
// 9) В строке кода: pm.environment.set("salary_variable", "variable_value");
// меняем "variable_value" на объявленную переменную money
// после чего получаем строку кода: pm.environment.set("salary_variable", money);
// 10) Внизу кода ставим еще сниппет для статус кода 200: 
// Status code: Code is 200
// 11) Получаем код в котором ничего не меняем и ставим его вверх кода:
// pm.test("Status code is 200", function () {
//     pm.response.to.have.status(200);
// });
// 12) Далее в самый низ кода добавляем вывод текста переменных в консоль, для визуального контроля:
// console.log('variable "jsonData":', jsonData);
// console.log('variable "money":', money);
// 13) Сохраняем и отправляем запрос.
// Готово, весь код должен выглядеть так:
// pm.test("Status code is 200", function () {
//     pm.response.to.have.status(200);
// });
//
// let jsonData = pm.response.json();
// let money = jsonData.salary;
// pm.environment.set("salary_variable", money);
//
// console.log('variable "jsonData":', jsonData);
// console.log('variable "money":', money);




4. Проверить, что name в ответе равно name s request (name вбить руками.)

Рабочий код сверки значения name в запросе и ответе:
============================================
let jsonData = pm.response.json();

let user_name = jsonData.name;
pm.test("Your test name", function () {
    var jsonData = pm.response.json();
    pm.expect(user_name).to.eql('Ayrat');
});

console.log('variable "jsonData":', jsonData);
console.log('variable "jsonData 2":', pm.response.json());
console.log('variable "user_name":', jsonData);
console.log('variable "user_name 2":', jsonData.name);
============================================

Описание логики кода:
1) Объявляется переменная в коде (это часть строки сниппета: "Response body: JSON value check" - с заменой var на let):
let jsonData = pm.response.json();
значение которой является ответ с сервера в формате json, который подтягивается через утверждение pm.response.json(); 
2) Объявляется переменная в коде
let user_name = jsonData.name;
где name после jsonData. это переменная с ответа сервера в формате json (отрывок ответа сервера: "name": "Ayrat",).
3) Выбирается сниппет Response body: JSON value check (тело ответа: проверка значения JSON)
============================================
pm.test("Your test name", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.value).to.eql(100);
});
============================================
в котором подменяются:
"Your test name" - на текст описания того, что мы проверяем (в данном случае ничего не меняем, т.к. как раз проверяем значение имени пользователя).
jsonData.value - целиком на созданную переменную в коде (user_name).
100 - на то значение, которое должно быть, которое мы и хотим проверить в итоге, т.е. в нашем случае это должен быть имя Ayrat
4) В качестве любопытства можно дополнительно вывести в консоль значения переменных:
console.log('variable "jsonData":', jsonData);
console.log('variable "jsonData 2":', pm.response.json());
console.log('variable "user_name":', user_name);
console.log('variable "user_name 2":', jsonData.name);




5. Проверить, что age в ответе равно age s request (age вбить руками.)

Рабочий код сверки значения age в запросе и ответе:
============================================
let jsonData = pm.response.json();

let user_age = jsonData.age;
pm.test("Your test age", function () {
    var jsonData = pm.response.json();
    pm.expect(user_age).to.eql('35');
});
============================================

Шаги воспроизведения:
1) Объявляется переменная в коде (это часть строки сниппета: "Response body: JSON value check" - с заменой var на let):
let jsonData = pm.response.json();
2) Объявляется переменная в коде
let user_age = jsonData.age;
где age после jsonData. это переменная с ответа сервера в формате json (отрывок ответа сервера: "age": "35",).
3) Выбирается сниппет Response body: JSON value check (тело ответа: проверка значения JSON)
============================================
pm.test("Your test name", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.value).to.eql(100);
});
============================================
в котором подменяются:
"Your test name" - на текст описания того, что мы проверяем ("Your test age").
jsonData.value - целиком на созданную переменную в коде (user_age).
100 - на то значение, которое должно быть, которое мы и хотим проверить в итоге, т.е. в нашем случае это должен быть возраст 35





6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)

Рабочий код сверки значения salary в запросе и ответе:
============================================
let jsonData = pm.response.json();

let user_salary = jsonData.salary;

pm.test("Your test salary", function () { 
    pm.expect(user_salary).to.eql(1000);
});
============================================

Шаги воспроизведения:
1) Объявляется переменная в коде (это часть строки сниппета: "Response body: JSON value check" - с заменой var на let):
let jsonData = pm.response.json();
2) Объявляется переменная в коде
let user_salary = jsonData.salary; 
где salary после jsonData. это переменная с ответа сервера в формате json (отрывок ответа сервера: "salary": 1000).
3) Выбирается сниппет Response body: JSON value check (тело ответа: проверка значения JSON)
============================================
pm.test("Your test name", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.value).to.eql(100);
});
============================================
в котором подменяются:
"Your test name" - на текст описания того, что мы проверяем ("Your test salary").
jsonData.value - целиком на созданную переменную в коде (user_salary).
100 - на то значение, которое должно быть, которое мы и хотим проверить в итоге, т.е. в нашем случае это должна быть заработная плата 1000



7. Спарсить request.

Рабочий код:
============================================
// Спарсить URL:
// var req_data = pm.request.url.query.toObject();
// var req_data = request.url;

// Спарсить body:
// var req_data = request.data;

// 1) Request body parsing:
var req_body_data = request.data;
console.log('data:', req_body_data)
// Request body test:
pm.test("Request body test", function () { 
    pm.expect(req_body_data).to.eql({name: "Ayrat", age: "35", salary: "1000"});
});

// 2) Request url parsing:
var req_url_data = request.url;
console.log('data:', req_url_data)
// Request url test:
pm.test("Request url test", function () { 
    pm.expect(req_url_data).to.eql("http://162.55.220.72:5005/user_info_3");
});
============================================



8. Проверить, что name в ответе равно name s request (name забрать из request.)

Рабочий код:
============================================
// Response body parsing:
let jsonData = pm.response.json();
// Response name parsing:
let user_name_response = jsonData.name;
// Request name parsing:
let user_name_request = request.data.name;

// Name Test:
pm.test("Request and response comparing test name is true", function () { 
    pm.expect(user_name_response).to.eql(user_name_request);
});

// Response name Test:
pm.test("Your response test name", function () { 
    pm.expect(user_name_response).to.eql("Ayrat");
});


// Request name Test:
pm.test("Your request test name", function () { 
    pm.expect(user_name_request).to.eql("Ayrat");
});


console.log('user name response:', user_name_response);
console.log('user name request:', user_name_request);
============================================





9. Проверить, что age в ответе равно age s request (age забрать из request.)

Рабочий код:
============================================
// Response body parsing:
let jsonData = pm.response.json();
// Response name parsing:
let user_age_response = jsonData.age;
// Request name parsing:
let user_age_request = request.data.age;


// Compare response and request user age:
pm.test("Compare response and request user age", function () { 
    pm.expect(user_age_response).to.eql(user_age_request);
});


console.log('user age response:', user_age_response);
console.log('user age request:', user_age_request);
============================================
в строке
pm.expect(user_age_response).to.eql(user_age_request);
проверяется уравнение двух переменных:
user_age_response
и
user_age_request



10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

Рабочий код:
============================================
// Response body parsing:
let jsonData = pm.response.json();
// Response user salary parsing:
let user_salary_response = +jsonData.salary;
// Request user salary parsing:
let user_salary_request = +request.data.salary;


// Compare response and request user salary:
pm.test("Compare response and request user salary", function () { 
    pm.expect(user_salary_response).to.eql(user_salary_request);
});


console.log('user salary response:', user_salary_response);
console.log('user salary request:', user_salary_request);
============================================



11. Вывести в консоль параметр family из response.

Рабочий код:
============================================
// Response body parsing:
let jsonData = pm.response.json();
// Response user family parsing:
let user_family_response = jsonData.family;


console.log('user family response:', user_family_response);
============================================




12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

Рабочий код:
============================================
// Response body parsing:
let jsonData = pm.response.json();
// Response u_salary_1_5_year parsing:
let salary_after_1_5_year = jsonData.family.u_salary_1_5_year;
// Response user salary parsing:
let user_salary = jsonData.salary;

// Compare user salary:
pm.test("Compare user salary after 1.5 year", function () { 
    pm.expect(salary_after_1_5_year).to.eql(user_salary*4);
});


console.log('salary_after_1_5_year:', salary_after_1_5_year);
console.log('user_salary:', user_salary);
============================================

















ОСТАНОВИЛСЯ ЗДЕСЬ ======>>>>>>>

E_HW_2_Postman_TASK_3_(07.07 00:00)
http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age s request (age забрать из request.)
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
8. Вывести в консоль параметр family из response.
9. Проверить, что у параметра dog есть параметры name.
10. Проверить, что у параметра dog есть параметры age.
11. Проверить, что параметр name имеет значение Luky.
12. Проверить, что параметр age имеет значение 4.

http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age из request (age забрать из request.)
7. Вывести в консоль параметр salary из request.
8. Вывести в консоль параметр salary из response.
9. Вывести в консоль 0-й элемент параметра salary из response.
10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name
19. Передать в окружение переменную age
20. Передать в окружение переменную salary
21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
