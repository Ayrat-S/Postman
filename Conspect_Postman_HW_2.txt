Group_28
10.05.2022
Postman_tests

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
КОНСПЕКТ ПО ВИДЕОУРОКУ

*** ТОКЕН
Создаем запрос Login
POST
http://162.55.220.72:5005/login
В body прописываем ключи
name Alexey
password 3432243

Отправляем
Получаем:
{
    "token": "/s34lfgbj/None/jjd909/72980kjkWpqc898None334890evny"
}

Теперь этот токен нужно автоматически забрать и передать в следующий запрос.

Пока сделаем вручную.

Предварительно просматриваем скрипты в PyCharm.
Запрос, который у нас требует токен (в коде Pyton)
@app.route('/test_pet_info', methods=['GET', 'POST'])
Т.е.:
test_pet_info

Создаем реквест test_pet_info
POST
http://162.55.220.72:5005/test_pet_info
Body, form-data:
name Mojo
age 3
weight 8

Здесь нам нужен еще и токен.
Если отправить запрос без него, то получим ошибку 500.
В form-data добавляем ключ: auth_token 
Вместо значения встявляем предыдущий токен:
"/s34lfgbj/None/jjd909/72980kjkWpqc898None334890evny"

Сервер должен вернуть результат:
{
    "age": 3,
    "daily_food": 0.096,
    "daily_sleep": 20.0,
    "name": "Mojo"
}

Если токен был с ошибкой в имени пользователя, то сервер вернет текст ошибки:
"Invalid token. Sign in please"

Вот таким образом мы пальцами передали токен.

18:00 остановился


*** СКРИПТЫ. 
А теперь поработаем с коружением и посмотрим как это все делать скриптами.

*** ОКРУЖЕНИЕ.
Окружение - это такая область памяти, в которую мы можем класть значение и из которой можем эти значения доставать. Эта область вполне настраиваемая.

Слева в колонке меню заходим в Environments
Жмем New
Называем group_28
Вписываем переменную token
Type оставляем default
Остальное оставляем пустым
Жмем сохранить

Заходим во вкладку Collection
В верхнем правом углу возле иконки "глаз" во всплывающем меню выбираем нужный Environment (окружение) - group_28.
Теперь данная коллекция будет работать с этим окружением.
Чтобы посмотреть что есть в окружении, жмем иконку "глаз".
На данный момент можно увидеть только переменную пустую переменную "token".
В Globals (глобальном окружении) пока ничего нет.
Пока открыто окно просмотра переменных окружения, можно нажать Edit для редактирования переменной.
Чтобы закрыть редактирование переменной окружения надо просто нажать крестик во вкладке окна, рядом со вкладками запросов.

*** СНИППЕТЫ.
Переходим в запрос Login
Открываем вклаку Tests
Ставим курсор на 5 строку.
Под словом Cookies жмем на стрелочку
Выбираем сниппет Set an environment variable
В окне Tests появится строка:
pm.environment.set("variable_key", "variable_value");

Это тот кусочек теста который засунет в наше окружение.
Вместо "variable_key" введем "token"
А вместо "variable_value" введем другое значение:

Ставим курсор на 1 строку.
Выбираем сниппет Response body: JSON value check
Всплывет текст:
pm.test("Your test name", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.value).to.eql(100);
});

Из этого текста нам нужно взять только:
    var jsonData = pm.response.json();
Копируем строку.
Удаляем последний сниппет.

Ставим курсор на 1 строку.
Вставляем скопированную строку
    var jsonData = pm.response.json();
Изменяем слово var на let
    let jsonData = pm.response.json();

Ставим курсор на 2 строку и пишем:
let token = jsonData.token;

Теперь, копируем слово token со 2 строки и вставляем в 5 строку вместо "variable_value", получится:
pm.environment.set("token", token);

ПОЛУЧИЛСЯ КУСОЧЕК СКРИПТА, который отработает, засунет значение в заранее созданную переменную token, в окружение group_28 которое здесь выбрано:
========================
let jsonData = pm.response.json();
let token = jsonData.token;


pm.environment.set("token", token);
========================

Сохраняем и жмем Send
Заходим в просмотр переменных в окружении через иконку "глаз", где мы увидим что в столбике CURRENT VALUE появилась строка с токеном:
/s34lfgbj/None/jjd909/17486kjkWpqc4282None218521evny


Теперь заходим в запрос test_pet_info
Меняем значение ключа auth_token на {{token}}
Сохраняем и отправляем запрос, получим ответ:
{
    "age": 3,
    "daily_food": 0.096,
    "daily_sleep": 20.0,
    "name": "Mojo"
}

КОНЕЦ КОНСПЕКТА ПО ВИДЕОУРОКУ по 22:16.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


**************************************************
**************************************************
*******************14:30-22:16********************
**************************************************
**************************************************
СКРИПТ КОПИРОВАНИЯ ТОКЕНА В ОКРУЖЕНИЕ ПРИ ЗАПРОСЕ, И ЕГО ИСПОЛЬЗОВАНИЕ В ПОСЛЕДУЮЩИХ ЗАПРОСАХ.

**************************************************
КОРОТКАЯ ИНСТРУКЦИЯ
1) У нас есть запрос POST /test_pet_info который требует токен для отработки, у которого в Body есть переменная с окружения.
2) Токен он может получить с окружения.
3) Чтобы токен попал в окружение, нужно написать скрипт во вкладке "Tests" в запросе POST /login, который закидывает ответ сервера с токеном в окружение.
4) Но чтобы полученный со скрипта токен куда-то записался, надо сначала создать пустую переменную "token" в окружении (в столбике VARIABLE).
5) Также, чтобы создать переменную "token" в окружении, нужно сначала создать само окружение, например "group_28" (в меню слева - Environment).
**************************************************

**************************************************
ПОДРОБНАЯ ИНСТРУКЦИЯ
1) У нас есть запрос POST /test_pet_info который требует токен для отработки.
Один из его KEY в Body form-data - "auth_token".
VALUE у "auth_token" будет переменная "token" с окружения "group_28". Выглядеть строка значения ключа должна вот так:
{{token}}
т.е. при введении значения переменной, открываем первую фигурную скобку { где сразу же во всплывающем меню постман предложит выбрать одну из ранее созданных переменных с окружения.
Выбираем токен "token" и сохраняем запрос.

ОСТАНОВИЛСЯ ЗДЕСЬ

2) Токен он может получить с окружения.
3) А чтобы токен попал в окружение, нужно написать скрипт во вкладке "Tests" в запросе POST /login, который закидывает ответ сервера с токеном в окружение:
===
let jsonData = pm.response.json();
let token = jsonData.token;

pm.environment.set("token", token);
===
4) Но чтобы токен куда-то записался, надо сначала создать пустую переменную "token" в окружении (Variable).
5) Также, чтобы создать переменную "token" в окружении, нужно сначала создать само окружение, например "group_28" (Environment).
**************************************************

**************************************************
ОПИСАНИЕ СКРИПТА С ВИДЕОУРОКА
- Т.е. мы можем опять отправить запрос POST /login (залогинились), 
- новый токен получили, 
- он автоматом засунулся в окружение, 
- запрос POST /test_pet_info который требует токен для отработки, получает токен из окружения и отрабатывает. 
- Нам не надо пальцами при каждом логине переставлять токен.
**************************************************

**************************************************
**************************************************
*******************14:30-22:16********************
**************************************************
**************************************************

23:19

***НОВЫЕ ПЕРЕМЕННЫЕ В ОКРУЖЕНИИ: url и port
В окружении group_28 сделать два переменных:
url (CURRENT: http://162.55.220.72)
port (CURRENT: 5005)
Сохранить.

В коллекции group_28, выбрать окружение group_28, в запросе test_pet_info в строке адреса пишем:
{{url}}:{{port}}/test_pet_info
Сервер должен вернуть ответ:
=====
{
    "age": 3,
    "daily_food": 0.096,
    "daily_sleep": 20.0,
    "name": "Mojo"
}
=====


***CОЗДАТЬ НОВЫЙ РЕКВЕСТ
{{url}}:{{port}}/new_data
POST
Body form-data:
age 30 
salary 5000
name Valera
auth_token {{token}}

Получим ответ:
======
{
    "age": 30,
    "name": "Valera",
    "salary": [
        5000,
        "10000",
        "15000"
    ]
}
======
27:08

Начать с постмана или теории чек-листов и тест-кейсов.
































