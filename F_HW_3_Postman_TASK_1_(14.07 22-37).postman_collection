{
	"info": {
		"_postman_id": "685ef8a9-5d88-45d1-8594-eeac95c9e5ff",
		"name": "F_HW_3_Postman_TASK_1_(14.07 12:21)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19866732"
	},
	"item": [
		{
			"name": "1-13 TASKS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request:\r",
							"// В Body form-data задаем параметр name, вместо значения которого ставим ссылку на параметр с окружения {{salary}}.\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// Аналогично первой задаче.\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// Аналогично первой задаче.\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"5_task: Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"console.log(\"jsonData\", jsonData)\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let request_POST_Data = pm.request;\r",
							"console.log(\"request_POST_Data\", request_POST_Data)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"8_task: Body matches string: start_qa_salary\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"9_task: Body matches string: qa_salary_after_6_months\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"10_task: Body matches string: qa_salary_after_12_months\", function (){\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"11_task: Body matches string: qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"12_task: Body mathces string: qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"13_task: Body mathces string: person\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"person\");\r",
							"\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"// Response parsing:\r",
							"let response_start_qa_salary = jsonData.start_qa_salary;\r",
							"console.log(\"response_start_qa_salary\", response_start_qa_salary)\r",
							"// Request parsing:\r",
							"let request_salary = +pm.request.body.formdata.toObject().salary;\r",
							"console.log(\"request_salary\", request_salary)\r",
							"// Test: start_qa_salary равен salary из request\r",
							"pm.test(\"14_task: Your test compare: start_qa_salary\", function () {\r",
							"    pm.expect(response_start_qa_salary).to.eql(request_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"// Response parsing:\r",
							"let response_qa_salary_after_6_months = jsonData.qa_salary_after_6_months;\r",
							"console.log(\"response_qa_salary_after_6_months\", response_qa_salary_after_6_months)\r",
							"// Request parsing:\r",
							"let request_salary_multiply_2 = +pm.request.body.formdata.toObject().salary*2;\r",
							"console.log(\"request_salary_multiply_2\", request_salary_multiply_2)\r",
							"// Test: параметр qa_salary_after_6_months равен salary*2 из request\r",
							"pm.test(\"15_task: Your test compare: qa_salary_after_6_months\", function () {\r",
							"    pm.expect(response_qa_salary_after_6_months).to.eql(request_salary_multiply_2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// Response parsing:\r",
							"let response_qa_salary_after_12_months = jsonData.qa_salary_after_12_months;\r",
							"console.log(\"response_qa_salary_after_12_months\", response_qa_salary_after_12_months)\r",
							"// Request parsing:\r",
							"let request_salary_multiply_2_7 = pm.request.body.formdata.toObject().salary*2.7;\r",
							"console.log(\"request_salary_multiply_2.7\", request_salary_multiply_2_7)\r",
							"// Test: параметр qa_salary_after_12_months равен salary*2.7 из request\r",
							"pm.test(\"16_task: Your test compare: qa_salary_after_12_months\", function () {\r",
							"    pm.expect(response_qa_salary_after_12_months).to.eql(request_salary_multiply_2_7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// Response parsing:\r",
							"let response_qa_salary_after_1_5_year = (jsonData[\"qa_salary_after_1.5_year\"]);\r",
							"console.log(\"response_qa_salary_after_1_5_year\", response_qa_salary_after_1_5_year)\r",
							"// Request parsing:\r",
							"let request_salary_multiply_3_3 = pm.request.body.formdata.toObject().salary*3.3;\r",
							"console.log(\"request_salary_multiply_3_3\", request_salary_multiply_3_3)\r",
							"// Test: параметр qa_salary_after_1.5_year равен salary*3.3 из request\r",
							"pm.test(\"17_task: Your test compare: qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(response_qa_salary_after_1_5_year).to.eql(request_salary_multiply_3_3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"// Response parsing:\r",
							"let response_qa_salary_after_3_5_years = (jsonData[\"qa_salary_after_3.5_years\"]);\r",
							"console.log(\"response_qa_salary_after_3.5_years\", response_qa_salary_after_3_5_years)\r",
							"// Request parsing:\r",
							"let request_salary_multiply_3_8 = pm.request.body.formdata.toObject().salary*3.8;\r",
							"console.log(\"request_salary_multiply_3_8\", request_salary_multiply_3_8)\r",
							"// Test: параметр qa_salary_after_3.5_years равен salary*3.8 из request\r",
							"pm.test(\"18_task: Your test compare: qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(response_qa_salary_after_3_5_years).to.eql(request_salary_multiply_3_8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"// Response parsing:\r",
							"let response_person_u_name_1 = jsonData.person.u_name[1];\r",
							"console.log(\"response_person_u_name_1\", response_person_u_name_1)\r",
							"// Request parsing. ПАРАМЕТР request_salary УЖЕ БЫЛ СОЗДАН, ПОЭТОМУ ЗДЕСЬ ЭТУ СТРОЧКУ ГЛУШИМ:\r",
							"// let request_salary = pm.request.body.formdata.toObject().salary;\r",
							"// console.log(\"request_salary\", request_salary)\r",
							"// Test: в параметре person, 1-й элемент из u_name равен salary из request\r",
							"pm.test(\"19_task: Your test compare: 1-й элемент из u_name\", function () {\r",
							"    pm.expect(response_person_u_name_1).to.eql(request_salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"// Response parsing:\r",
							"let response_u_age = jsonData.person.u_name[2];\r",
							"console.log(\"response_u_age\", response_u_age)\r",
							"// // Request parsing:\r",
							"let request_age = +pm.request.body.formdata.toObject().age;\r",
							"console.log(\"request_age\", request_age)\r",
							"// // Test: параметр u_age равен age из request\r",
							"pm.test(\"20_task: Your test: u_age равен age из request\", function () {\r",
							"    pm.expect(response_u_age).to.eql(request_age);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"console.log(\"response_person_u_age\", jsonData.person.u_age)\r",
							"console.log(\"response_person_u_age\", jsonData.person.u_name[0])\r",
							"console.log(\"response_person_u_age\", jsonData.person.u_name[1])\r",
							"console.log(\"response_person_u_age\", jsonData.person.u_name[2])\r",
							"console.log(\"response_person_u_age\", jsonData.person.u_salary_5_years)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}